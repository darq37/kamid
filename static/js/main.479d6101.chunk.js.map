{"version":3,"sources":["transparent-logo.png","components/header/Header.js","components/Layout.js","components/About.js","components/Main.js","components/Contact.js","components/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","logo","alt","Layout","props","children","About","App","exact","path","component","Main","Contact","NoMatch","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,8C,0OCyB5BC,MAnBf,WACI,OACI,yBAAKC,UAAU,UACX,kBAAC,IAAD,CAAMC,GAAI,KACN,yBAAKC,IAAKC,IAAMH,UAAU,WAAWI,IAAI,UAE7C,uBAAGJ,UAAU,SAAb,gBACA,kBAAC,IAAD,CAAMC,GAAI,YACN,4BAAQD,UAAU,eAAlB,YAEJ,kBAAC,IAAD,CAAMC,GAAI,UACN,4BAAQD,UAAU,eAAlB,UAEJ,uBAAGA,UAAU,QAAb,gBACA,uBAAGA,UAAU,cAAb,kBCRGK,MATf,SAAgBC,GACZ,OACI,oCACI,kBAAC,EAAD,MACCA,EAAMC,W,OCDJC,EAJD,kBACV,6CCDW,oBAAO,6BAClB,6BACI,sCACA,2CCHO,oBAAO,6BAClB,6BACI,uCACA,iDCHO,oBACV,mCCuBUC,E,iLAdP,OAAO,kBAAC,IAAD,KACH,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWC,IACnC,kBAAC,IAAD,CAAOF,KAAM,SAAUC,UAAWJ,IAClC,kBAAC,IAAD,CAAOG,KAAM,WAAYC,UAAWE,IACpC,kBAAC,IAAD,CAAOF,UAAWG,W,GARpBC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.479d6101.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/transparent-logo.30a2221b.png\";","import React from 'react';\r\nimport logo from '../../transparent-logo.png';\r\nimport './header.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <Link to={\"/\"}>\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n            </Link>\r\n            <p className=\"title\">F.P.H. KAMID</p>\r\n            <Link to={\"/contact\"}>\r\n                <button className=\"menu-button\">Kontakt</button>\r\n            </Link>\r\n            <Link to={\"/about\"}>\r\n                <button className=\"menu-button\">O NAS</button>\r\n            </Link>\r\n            <p className=\"call\">ZADZWOÅƒ</p>\r\n            <p className=\"callNumber\">81 746 85 70</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from \"./header/Header\";\r\n\r\nfunction Layout(props) {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            {props.children}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\nconst About = () => (\r\n    <p>What about me</p>\r\n);\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nexport default () => (<div>\r\n    <div>\r\n        <h1>Header</h1>\r\n        <p>Paragraph</p>\r\n    </div>\r\n</div>)\r\n","import React from \"react\";\r\n\r\nexport default () => (<div>\r\n    <div>\r\n        <h1>CONTACT</h1>\r\n        <p>+48 700 880 600</p>\r\n    </div>\r\n</div>)\r\n","import React from \"react\";\r\n\r\nexport default () => (\r\n     <p>404</p>\r\n)","import React from 'react';\r\nimport Layout from \"./components/Layout\";\r\nimport {Route, Switch} from \"react-router\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport About from \"./components/About\";\r\nimport Main from \"./components/Main\";\r\nimport Contact from \"./components/Contact\";\r\nimport NoMatch from \"./components/NoMatch\";\r\n\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return <BrowserRouter>\r\n            <Layout>\r\n                <Switch>\r\n                    <Route exact path={\"/\"} component={Main}/>\r\n                    <Route path={\"/about\"} component={About}/>\r\n                    <Route path={\"/contact\"} component={Contact}/>\r\n                    <Route component={NoMatch}/>\r\n                </Switch>\r\n            </Layout>\r\n        </BrowserRouter>\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}